servers:
  - description: Local
    url: 'http://localhost:5006'
  - url: 'https://sock-user.apps.pcfone.io'
    description: PCF One
  - url: 'https://sock-user.apps.cf.maki.lol'
    description: CF for K8s
components:
  schemas:
    CustomerResponse:
      title: CustomerResponse
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/CustomerAddressResponse'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/CustomerCardResponse'
      x-tags:
        - Customer
    CustomerAddressResponse:
      title: CustomerAddressResponse
      type: object
      properties:
        addressId:
          type: string
          format: uuid
        number:
          type: string
        street:
          type: string
        city:
          type: string
        postcode:
          type: string
        country:
          type: string
      x-tags:
        - Customer
    CustomerCardResponse:
      title: CustomerCardResponse
      type: object
      properties:
        cardId:
          type: string
          format: uuid
        longNum:
          type: string
        expires:
          type: string
          format: date
        ccv:
          type: string
      x-tags:
        - Customer
    CustomerAddressCreateRequest:
      title: CustomerAddressCreateRequest
      type: object
      properties:
        number:
          type: string
        street:
          type: string
        city:
          type: string
        postcode:
          type: string
        country:
          type: string
      x-tags:
        - Customer
    CustomerCardCreateRequest:
      title: CustomerCardCreateRequest
      type: object
      properties:
        longNum:
          type: string
        expires:
          type: string
          format: date
        ccv:
          type: string
      x-tags:
        - Customer
    CustomerCreateRequest:
      title: CustomerCreateRequest
      type: object
      x-tags:
        - Customer
      properties:
        username:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        allowDuplicateEmail:
          type: boolean
          default: 'false'
info:
  contact: {}
  description: User API
  license:
    name: Apache 2.0
  title: 'Spring Sock Shop: User API'
  version: 0.1.0-SNAPSHOT
openapi: 3.0.1
paths:
  /cards:
    parameters: []
    post:
      summary: Create a new card
      operationId: post-cards
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCardResponse'
      description: Create a new card
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCardCreateRequest'
      tags:
        - Customer
  /addresses:
    post:
      summary: Create a new address
      operationId: post-addresses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAddressResponse'
      description: Create a new address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerAddressCreateRequest'
      tags:
        - Customer
  /me:
    get:
      summary: Get the logged-in user information
      tags:
        - Customer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
      operationId: get-me
      description: Get the logged-in user information
  /customers:
    post:
      summary: Register a customer
      operationId: create-customer
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
          headers:
            Location:
              schema:
                type: string
                format: uri
      description: Create a customer
      tags:
        - Customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreateRequest'
            examples: {}
  '/customers/{customerId}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: customerId
        in: path
        required: true
    get:
      summary: Get a customer
      tags:
        - Customer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
      operationId: get-customer-by-customer-id
      description: Get a customer
